import { __extends } from "tslib";
import Component from './component';
import Timeline from './canvas/timeline';
import { generateFrameElement } from './playerFrames';
var Player = /** @class */function (_super) {
  __extends(Player, _super);
  function Player(props) {
    var _this = _super.call(this, props) || this;
    _this.next = function () {
      var _a = _this.state,
        index = _a.index,
        count = _a.count;
      var _b = _this.props,
        _c = _b.onend,
        onend = _c === void 0 ? function () {} : _c,
        state = _b.state;
      if (index < count - 1 && state === 'play') {
        _this.setState(function () {
          return {
            index: index + 1
          };
        });
      } else {
        onend();
      }
    };
    var _a = props.keyFrames,
      keyFrames = _a === void 0 ? [] : _a,
      children = props.children;
    _this.playerFrames = keyFrames.reduce(function (array, cur) {
      var frames = generateFrameElement(cur, array[array.length - 1] || children);
      array.push(frames);
      return array;
    }, []);
    var count = _this.playerFrames.length;
    _this.state = {
      count: count,
      index: 0
    };
    return _this;
  }
  Player.prototype.setPlayState = function () {
    var _a = this,
      props = _a.props,
      context = _a.context;
    var playState = props.state;
    var timeline = context.timeline;
    timeline.setPlayState(playState);
  };
  Player.prototype.willMount = function () {
    this.context.timeline = new Timeline(this);
  };
  Player.prototype.didMount = function () {
    var _a = this,
      animator = _a.animator,
      props = _a.props;
    var state = props.state;
    animator.on('end', this.next);
    if (state === 'finish') {
      this.setState(function (_a) {
        var count = _a.count;
        return {
          index: count - 1
        };
      });
    }
  };
  Player.prototype.willUpdate = function () {
    var _a = this,
      context = _a.context,
      props = _a.props;
    var state = props.state;
    var timeline = context.timeline;
    if (state === 'finish' && timeline.getPlayState() !== 'finish') {
      this.setState(function (_a) {
        var count = _a.count;
        return {
          index: count - 1
        };
      });
    }
  };
  Player.prototype.animationWillPlay = function () {
    var _a = this,
      animator = _a.animator,
      context = _a.context;
    // @ts-ignore
    var timeline = context.timeline;
    var animations = animator.animations;
    timeline.add(animations);
    animator.animations = timeline.getAnimation();
    this.setPlayState();
  };
  Player.prototype.render = function () {
    return this.playerFrames[this.state.index];
  };
  return Player;
}(Component);
export default Player;