import { Component, ComponentType } from '@antv/f-engine';
import Chart, { ChartChildProps, Point } from '../../chart';
import { AnimationProps } from '@antv/f-engine';
export interface GuideProps {
    records: any;
    onClick?: (ev: any) => void;
    animation?: ((points: Point[], chart: Chart) => AnimationProps) | AnimationProps;
    [key: string]: any;
}
declare const _default: (View: ComponentType) => {
    new <IProps extends GuideProps = GuideProps>(props: IProps & ChartChildProps<import("../../chart/Data").DataRecord>): {
        chart: Chart;
        getGuideBBox(): any;
        parseReplaceStr(value: any, scale: any): any;
        parsePoint(record: any): {
            x: any;
            y: any;
        };
        convertPoints(records: any): any;
        getGuideTheme(): any;
        render(): import("@antv/f-engine").JSX.Element;
        props: IProps & ChartChildProps<import("../../chart/Data").DataRecord>;
        state: import("@antv/f-engine").IState;
        context: import("@antv/f-engine").IContext;
        refs: {
            [key: string]: Component<import("@antv/f-engine").IProps, import("@antv/f-engine").IState>;
        };
        updater: import("@antv/f-engine/es/component/updater").Updater<import("@antv/f-engine").IState>;
        container: import("@antv/g-lite").Group;
        layout: import("@antv/f-engine").LayoutProps;
        children: import("@antv/f-engine/es/canvas/vnode").VNode | import("@antv/f-engine/es/canvas/vnode").VNode[];
        isMounted: boolean;
        animate: boolean;
        animator: import("@antv/f-engine/es/canvas/render/animator").default;
        destroyed: boolean;
        _vNode: import("@antv/f-engine/es/canvas/vnode").VNode;
        willMount(): void;
        didMount(): void;
        shouldUpdate(_nextProps: IProps & ChartChildProps<import("../../chart/Data").DataRecord>): boolean;
        willReceiveProps(_props: IProps & ChartChildProps<import("../../chart/Data").DataRecord>, _context?: import("@antv/f-engine").IContext): void;
        willUpdate(): void;
        didUpdate(): void;
        willUnmount(): void;
        didUnmount(): void;
        setState(partialState: import("@antv/f-engine").IState, callback?: () => void): void;
        forceUpdate(callback?: () => void): void;
        setAnimate(animate: boolean): void;
        destroy(): void;
    };
};
export default _default;
